import cv2
import numpy as np
import math
import sys
import serial
import time

cap = cv2.VideoCapture("http://10.21.69.11/mjpg/video.mjpg")
count = 0
beginDataTransfer = False
ser = serial.Serial(
	port='/dev/ttyUSB0',
	baudrate = 9600,
	parity=serial.PARITY_NONE,
	stopbits=serial.STOPBITS_ONE,
	bytesize=serial.EIGHTBITS
	)
if(ser.isOpen()):
	ser.close()
ser.open()
while(True):
    if(ser.readline() == "begin"):
        beginDataTransfer = True
    if(beginDataTransfer == True):
        #set frame to im
        ret,im = cap.read()
        #create hsv filter and apply ranges
        hsv_img = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)
        COLOR_MIN = np.array([67, 59, 178],np.uint8)
        COLOR_MAX = np.array([150, 255, 255],np.uint8)
        #create threshold for hsv and contours
        frame_threshed = cv2.inRange(hsv_img, COLOR_MIN, COLOR_MAX)
        imgray = frame_threshed
        ret,thresh = cv2.threshold(frame_threshed,127,255,0)
        contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

        # Find the index of the largest contour
        areas = [cv2.contourArea(c) for c in contours]
        #if the array is larger than 1 object
        if(len(areas)>=1):
            max_index = np.argmax(areas)
            cnt=contours[max_index]
            M = cv2.moments(cnt)
            #check that centroid exists
            if(not(M['m00'] == 0)): 
                    cx = int(M['m10']/M['m00'])
                    cy = int(M['m01']/M['m00'])
                    rect = cv2.minAreaRect(cnt)
                    box = cv2.cv.BoxPoints(rect)
                    a,b,c,d = cv2.cv.BoxPoints(rect)
                    #find corners and assign them
                    if(a[0]<cx and a[1]<cy):
                        topleft = a
                    if(b[0]<cx and b[1]<cy):
                        topleft = b
                    if(c[0]<cx and c[1]<cy):
                        topleft = c
                    if(d[0]<cx and d[1]<cy):
                        topleft = d

                    if(a[0]<cx and a[1]>cy):
                        bottomleft = a
                    if(b[0]<cx and b[1]>cy):
                        bottomleft = b
                    if(c[0]<cx and c[1]>cy):
                        bottomleft = c
                    if(d[0]<cx and d[1]>cy):
                        bottomleft = d
                    #define side lenth of bounding box
                    h = bottomleft[1] - topleft[1]
                    #math to calcuate the side length of reflective tape
                    sideLength = h/math.sin(90)
                    #get height, width and color from frame
                    height,width,blah = im.shape
	  #d = w / tan(angle)
	  totalDistance = (((12*height)/h)/2)/math.tan(((37.4*3.14159)/180.0)/2.0)
                    d = ((totalDistance*100)/12)/100
                    #contour stuff
                    box = np.int0(box)
                    cv2.drawContours(im,[box],0,(0,0,255),2)
                    #calcuate difference from centroid to edge
                    pixelDifference = abs(cx-width)
                    #pixel to inch math and width math
                    inchPerPixel = (((12/sideLength)*pixelDifference)/12)
                    widthInFeet = (((12/sideLength)*(width/2))/12)
                    #piecing it all together with angle math
                    angleToTurn = ((math.asin(widthInFeet/d))-(math.asin(inchPerPixel/d)))
                    angleToTurn = math.degrees(angleToTurn)
                    #debugging statements 
                    if(cx>(width/2)):
                        turn = 'left wheels'
                    if(cx<(width/2)):
                        turn = 'right wheels'
                    if(cx==(width/2)):
                        turn = 'center'
                    #print 'turning', turn
                    #frame view for early static image tests
                    #cv2.imshow("Show",im)
                    #cv2.imshow("hsv",imgray)
                    #rounding angle to help buffer size
                    rounded = ("%.3f" % angleToTurn)
                    print 'angleToTurn:',angleToTurn
                    print '    rounded:',rounded
	bin = str(rounded)
					
	#my code
	secondRounded = ("%.3f" % d)
	secondBin = str(secondRounded)
	finalBin = bin + '*' + secondBin
					
                    #send every tenth calc to help buffer lag
                    if(count >= 10):
                            ser.write(finalBin)
                            ser.write('\n')
                            count = 0
                    count += 1
        #prevent program from crashing if array is less than 1 object
        if(not(len(areas)>=1)):
            print 'no target'
            ser.write('no target\n')


